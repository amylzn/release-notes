# This is a basic workflow to help you get started with Actions

name: Release Notes

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    types:
      - opened
      - synchronize # testing

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  generate-release-notes:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for "Add to release notes" checkbox
        id: check_checkbox
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "DEBUG: PR Body content: $PR_BODY"
          if [[ "$PR_BODY" =~ "- [x] Add to release notes" ]]; then
            echo "add_to_release_notes=true" >> $GITHUB_OUTPUT # Set output using GITHUB_OUTPUT
          else
            echo "add_to_release_notes=false" >> $GITHUB_OUTPUT # Set output using GITHUB_OUTPUT
          fi
        shell: bash

      # Append the new release note entry to release_notes.md
          echo "$RELEASE_NOTE_ENTRY" >> release_notes.md

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Ensure a local 'main' branch exists and is tracking 'origin/main'
          # If the branch doesn't exist or is not tracking origin, create it and set it up.
          if [[ $(git rev-parse --symbolic-full-name --abbrev-ref HEAD) != "main" ]]; then
            echo "Local 'main' branch is not active, creating and tracking it."
            git checkout --track origin/main
          fi

          # Configure Git to rebase by default for pull operations
          # This should prevent the "fatal: Need to specify how to reconcile divergent branches" error.
          git config --global pull.rebase true
          
          # Pull the latest changes from the remote before committing.
          # This ensures our local environment has the most up-to-date
          # release_notes.md and helps prevent push rejections.
          # It's crucial for avoiding conflicts.
          git pull origin main

          # Add only the modified release_notes.md file to the staging area
          git add release_notes.md
          
          # Commit the changes locally. The -m flag provides the commit message.
          git commit -m "docs: Update release notes for PR #${{ github.event.pull_request.number }}"
          
          # Push the changes to the base branch.
          # HEAD:target_branch tells Git to push the commit at HEAD to the specified branch.
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log "Not adding to release notes"
        if: steps.check_checkbox.outputs.add_to_release_notes == 'false'
        run: | 
          echo "Not adding to release notes: Checkbox not found or not checked."
